/*
   \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\|////////////////////////////////////
   \\							                 //
   \\                                                                    //
   \\                    __   __    ____ _____ ____                      //
   \\                    \ \ / /_ _/ ___|_   _|___ \                     //
   \\                     \ V / _` \___ \ | |   __) |                    //
   \\                      | | (_| |___) || |  / __/                     //
   \\                      |_|\__,_|____/ |_| |_____|                    //
   \\                                                         -o)        //
   --------------------------------------------------------   /\\  --------
   \\	                                        	     _\_v
   \\
   \\   Author:        Ludwig Nussel <lnussel@suse.de>
   \\                  Michael Hager <mike@suse.de>
   \\
   \\   Description:   YCC
   \\
   \\   Purpose:       generating metadata for y2controlcenter
   \\                  (menu/icons/entrys)
   \\
   \\   external data: /usr/lib/YaST2/menuentries/menu*.ycp
   \\
   \\   Parameter:     [boolean onlynoroot]
   \\
   ------------------------------------------------------------------------
   \\ $Id$

*/
{
   textdomain "menu";

   string MENUENTRYDIR="/usr/lib/YaST2/menuentries";
   string configfile  ="/usr/lib/YaST2/etc/y2controlcentericons.ycp";
   string icondir     ="/usr/lib/YaST2/images/";
   map    tmpmodinfo  =$[];
   map    modulemap   =$[];
   map    iconmap     =$[];
   map    iconnamemap =$[];
   string configstring="";
   boolean onlynoroot =false;

   string tmpfile = "/dev/stdout";

//   if (is(Args(0),string))
//   {
//   	tmpfile=Args(0);
//   }
   if (size(Args()) > 0 && is(Args(0),boolean))
   {
	   onlynoroot=Args(0);
   }

   ////////////////////////////////////////////////////////////
   // Read the group and group-icon information from
   // /usr/lib/YaST2/etc/y2controlcentericons.ycp

   // this file comes from inst-general, so we need use this
   // textdomain
   textdomain "general";

   y2debug( "y2..conf: %1", configfile);
   any cont = SCR(`Read(.target.ycp, configfile));

   y2debug( "y2..conf: %1", cont);

   SCR(`Write(.target.string, tmpfile, "[Groups]\n"));

   if (is (cont,map))
   {
       foreach(`k,`v,cont,
       ``{
 	    string name  = eval(lookup(v, "name", "unknown"));
 	    string icon  = eval(lookup(v, "icon", "default.png"));
 	    string sortkey = eval(lookup(v, "sortkey", ""));

	    if(SCR::Read(.target.size, icondir+icon) == -1)
	    {
	       icon="defaultgroup.png";
	    }


	    y2debug( "Icon: %1 %2 %3",   k, icon, name);
 	    iconmap     = add(iconmap,     k, icon);
 	    iconnamemap = add(iconnamemap, k, name);
	    SCR(`Write(.target.string, tmpfile, "GroupName: "+name+"\nGroupIcon: "+icon+"\n"));
	    if(sortkey != "")
	    {
	       SCR(`Write(.target.string, tmpfile, "GroupSortKey: "+sortkey+"\n"));
	    }
         });

       y2debug("Iconmap added: %1", iconmap);
   }
   else
   {
       // go on without group icons ...
   }

   textdomain "menu";

   SCR(`Write(.target.string, tmpfile, "[Modules]\n"));

   ////////////////////////////////////////////////////////////
   // Now read all /usr/lib/YaST2/menuentries/meu*.ycp
   // and create icons in the YCC
   //string commonstring = "%1+++\nName: %2\nYCPFunction: %6\nGroup: %3\nIcon: %4\nHelptext: %5\nGroupIcon: %7\nArguments: %8\n\n";
//string commonstring = "+++\nName: %1\nYCPFunction: %5\nGroup: %2\nIcon: %3\nHelptext: %4\nGroupIcon: %6\nArguments: %7\n";
string commonstring = "+++\nName: %1\nYCPFunction: %5\nGroup: %2\nIcon: %3\nHelptext: %4\nArguments: %6\n";

   foreach(`entry, SCR(`Read(.target.dir, MENUENTRYDIR)),
   ``{
       if (substring(entry, size(entry)-4) == ".ycp")
       {

 	   any  content = SCR(`Read(.target.ycp, MENUENTRYDIR + "/" + entry));

 	   any entryvalue = eval(content);

	   y2debug( "CONTENT %1", entryvalue);

 	   if (is(entryvalue, [ string the_name, map the_info ]))
 	   {
	       string name = select(entryvalue, 0);
	       map    info = select(entryvalue, 1);

	       // lookup value as symbol, then string otherwise use default
 	       string group      = lookup(info,`group,     lookup(info, "group",     "Misc"));
 	       list   arguments  = lookup(info,`arguments, lookup(info, "arguments", [] ));
	       string menuentry  = lookup(info,`menuentry, lookup(info, "menuentry", "UNKOWN"    ));
	       string icon       = lookup(info,`icon,      lookup(info, "icon",      "default.png"   ));
	       string helptext   = lookup(info,`helptext,  lookup(info, "helptext",   ""  ));
	       string geometry   = lookup(info,`geometry,  lookup(info, "geometry",   ""  ));
	       string sortkey   = lookup(info,`sortkey,  lookup(info, "sortkey",   ""  ));
	       boolean requiresroot  = lookup(info,`requiresroot, lookup(info, "requiresroot",  true ));

	       string groupname  = lookup(iconnamemap, group, group);

	       if(SCR::Read(.target.size, icondir+icon) == -1)
	       {
		  icon="default.png";
	       }

	       if(onlynoroot == false || requiresroot == false )
	       {
		       //FIXME: workaround for missing replace functions for strings
		       helptext=mergestring(splitstring(helptext,"\n")," ");
	 	       //configstring  = sformat(commonstring,configstring,
	 	       configstring  = sformat(commonstring,
					       menuentry,
					       groupname,
					       icon,
					       helptext,
					       name,
					       arguments
					       );
		       if(geometry != "")
		       {
			       configstring=configstring+"Geometry: "+geometry+"\n";
		       }
		       if(sortkey != "")
		       {
			       configstring=configstring+"SortKey: "+sortkey+"\n";
		       }
		       configstring=configstring+"\n";
//		       WriteString(tmpfile,configstring);
		       SCR(`Write(.target.string, tmpfile, configstring));
	       }

 	   }
 	   else
 	   {
	       y2debug("Warning: Invalid menuentry file %1",  MENUENTRYDIR + "/" + entry );
 	       //y2warning( "Invalid menuentry file " + MENUENTRYDIR + "/" + entry);
 	   }
       }
   });

   // Write the metadata to /tmp/y2controlcenter.moduleslist.XXXXXX
   // y2controlcenter will read it ...
//   WriteString(tmpfile,configstring);

   //	_dump_variables();

}

// vim: sw=3
